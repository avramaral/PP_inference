L  <- psp(x0 = 0, y0 = 0, x1 = 100, y1 = 0, owin(c(0, 100), c(-5, 5)))
pp <- as.ppp(cbind(c(nhpp), 0), W = L)
q <- quadratcount(X = pp, nx = 10, ny = 1)
plot(q, main = "")
ts <- quadrat.test(X = pp, nx = 10, ny = 1)
ts
plot(q, main = "")
L  <- psp(x0 = 0, y0 = 0, x1 = 100, y1 = 0, owin(c(0, 100), c(-5, 5)))
pp <- as.ppp(cbind(c(nhpp), 0), W = L)
q <- quadratcount(X = pp, nx = 5, ny = 1)
plot(q, main = "")
ts <- quadrat.test(X = pp, nx = 5, ny = 1)
ts
q <- quadratcount(X = pp, nx = 20, ny = 1)
plot(q, main = "")
ts <- quadrat.test(X = pp, nx = 20, ny = 1)
q <- quadratcount(X = pp, nx = 8, ny = 1)
plot(q, main = "")
ts <- quadrat.test(X = pp, nx = 8, ny = 1)
ts
?chorley
print(chorley)
summary(c(1))
print(chorley)
plot(chorley, cols = c("red", rgb(0, 1, 0, 0.5)), pch = c(19, 4), cex = 0.75, main = "Cancer cases")
lung <- chorley[chorley$marks == "lung"]
lung <- ppp(x = lung$x, y = lung$y, window = lung$window)
plot(lung, cols = "green", pch = 4, cex = 0.75, main = "Lung-cancer cases")
resolution <- 0.25
map <- as(st_as_sf(lung$window), "Spatial") # Convert it to a `SpatialPolygonsDataFrame` object
map$cancer <- "lung"
plot(map)
r <- raster(map, resolution = resolution) # Create a `raster` object based on the map and resolution
(n_row <- nrow(r))
(n_col <- ncol(r))
r[] <- 0
dpts <- SpatialPoints(cbind(rev(lung$x), rev(lung$y))) # Convert the locations to a `SpatialPoints` object
(tab <- table(cellFromXY(r, dpts)))
r[as.numeric(names(tab))] <- tab # Assign the number of observed events to the ``raster`` object
plot(r)
plot(map, add = T)
grid <- rasterToPolygons(r) # Convert it to a `SpatialPolygonsDataFrame` object
grid <- grid[as.vector(matrix(1:nrow(grid), nrow = n_row, ncol = n_col, byrow = T)), ] # Rearrange the indices numbering
grid$id <- 1:nrow(grid)
grid$Y <- grid$layer
grid$cellarea <- resolution * resolution
plot(grid)
gridmap <- raster::intersect(x = grid, y = map) # Compute the intersection between
grid <- grid[grid$id %in% gridmap$id, ]
plot(grid)
plot(map, border = "red", lwd = 1, add = T)
summary(grid)
formula <- Y ~ 1 + f(id, model = "matern2d", nrow = n_row, ncol = n_col, nu = 1) # Intercept + Matérn spatial random effects
res <- inla(formula,
family = "poisson",
data = grid@data,
E = cellarea) # Acts like an offset
print(summary(res))
asdf[] <- 0
asdf
qwe[] <- 0
qwe
print(chorley)
plot(chorley, cols = c("red", rgb(0, 1, 0, 0.5)), pch = c(19, 4), cex = 0.75, main = "Cancer cases")
lung <- chorley[chorley$marks == "lung"]
lung <- ppp(x = lung$x, y = lung$y, window = lung$window)
plot(lung, cols = "green", pch = 4, cex = 0.75, main = "Lung-cancer cases")
resolution <- 0.25
map <- as(st_as_sf(lung$window), "Spatial") # Convert it to a `SpatialPolygonsDataFrame` object
map$cancer <- "lung"
plot(map)
r <- raster(map, resolution = resolution) # Create a `raster` object based on the map and resolution
(n_row <- nrow(r))
(n_col <- ncol(r))
resolution <- 0.5
map <- as(st_as_sf(lung$window), "Spatial") # Convert it to a `SpatialPolygonsDataFrame` object
map$cancer <- "lung"
plot(map)
r <- raster(map, resolution = resolution) # Create a `raster` object based on the map and resolution
(n_row <- nrow(r))
(n_col <- ncol(r))
r
r[]
r
r[] <- 0 # Set all `NA` to `0`
dpts <- SpatialPoints(cbind(rev(lung$x), rev(lung$y))) # Convert the locations to a `SpatialPoints` object
dpts
plot(The data give the precise domicile addresses of new cases of cancer of the larynx (58 cases) and cancer of the lung (978 cases), recorded in the Chorley and South Ribble Health Authority of Lancashire (England) between 1974 and 1983. The supplementary data give the location of a disused industrial incinerator.)
plot(dpts)
(tab <- table(cellFromXY(r, dpts)))
r[as.numeric(names(tab))] <- tab # Assign the number of observed events to the `raster` object
plot(r)
plot(map, add = T)
plot(map)
grid <- rasterToPolygons(r) # Convert it to a `SpatialPolygonsDataFrame` object
grid <- grid[as.vector(matrix(1:nrow(grid), nrow = n_row, ncol = n_col, byrow = T)), ] # Rearrange the indices numbering
grid$id <- 1:nrow(grid)
grid$Y <- grid$layer
grid$cellarea <- resolution * resolution
plot(grid)
gridmap <- raster::intersect(x = grid, y = map) # Compute the intersection between
gridmap <- raster::intersect(x = grid, y = map) # Compute the intersection between `grid` and `map`
grid <- grid[grid$id %in% gridmap$id, ]
plot(grid)
plot(map, border = "red", lwd = 1, add = T)
summary(grid)
formula <- Y ~ 1 + f(id, model = "matern2d", nrow = n_row, ncol = n_col, nu = 1) # Intercept + Matérn spatial random effects
res <- inla(formula,
family = "poisson",
data = grid@data,
E = cellarea) # Acts like an offset
summary(res)
formula
grid@data
grid@data
grid@data$Y
grid@data$Y %>% sum
n_row
n_col
formula
?f
inla.doc("matern2d")
res$summary.hyperpar
res$summary.fitted.values
res$summary.fixed
summary(res)
setwd("~/Desktop/Tutorial PP")
saveRDS("inla_res.RDS")
saveRDS(object = res, file = "inla_res.RDS")
prior.list <-  list(
conservative_phi = list(
prec = list(prior = "pc.prec", param = c(0.25 , 0.01)),
phi = list(prior = "pc",    param = c(0.5, 2/3))),
half_phi = list(
prec = list(prior = "pc.prec", param = c(0.25, 0.01)),
phi = list(prior = "pc",    param = c(0.5, 1/2))),
liberal_phi = list(
prec = list(prior = "pc.prec", param = c(0.25, 0.01)),
phi = list(prior = "pc",    param = c(0.5, 1/3))),
more_liberal_phi = list(
prec = list(prior = "pc.prec", param = c(0.25, 0.01)),
phi = list(prior = "pc",    param = c(0.5, 1/10)))
)
res <- inla(formula,
family = "poisson",
data = grid@data,
E = cellarea, hyper = prior.list[[1]]) # Acts like an offset
formula <- Y ~ 1 + f(id, model = "matern2d", nrow = n_row, ncol = n_col, nu = 1, hyper = prior.list[[1]]) # Intercept + Matérn spatial random effects
prior.list <-  list(
conservative_phi = list(
prec = list(prior = "pc.prec", param = c(0.25 , 0.01)),
phi = list(prior = "pc",    param = c(0.5, 2/3))),
half_phi = list(
prec = list(prior = "pc.prec", param = c(0.25, 0.01)),
phi = list(prior = "pc",    param = c(0.5, 1/2))),
liberal_phi = list(
prec = list(prior = "pc.prec", param = c(0.25, 0.01)),
phi = list(prior = "pc",    param = c(0.5, 1/3))),
more_liberal_phi = list(
prec = list(prior = "pc.prec", param = c(0.25, 0.01)),
phi = list(prior = "pc",    param = c(0.5, 1/10)))
)
res <- inla(formula,
family = "poisson",
data = grid@data,
E = cellarea) # Acts like an offset
prior.list <- list(range = list(param = c(1, 1), prior = "loggamma", initial = 1), prec = list(param = c(1, 1)))
formula <- Y ~ 1 + f(id, model = "matern2d", nrow = n_row, ncol = n_col, nu = 1, hyper = prior.list) # Intercept + Matérn spatial random effects
prior.list <- list(range = list(param = c(1, 1), prior = "loggamma", initial = 1), prec = list(param = c(1, 1)))
res <- inla(formula,
family = "poisson",
data = grid@data,
E = cellarea) # Acts like an offset
prior.list <- list(range = list(param = c(1, 1)), prec = list(param = c(1, 1)))
formula <- Y ~ 1 + f(id, model = "matern2d", nrow = n_row, ncol = n_col, nu = 1, hyper = prior.list) # Intercept + Matérn spatial random effects
res <- inla(formula,
family = "poisson",
data = grid@data,
E = cellarea) # Acts like an offset
res <- inla(formula,
family = "poisson",
data = grid@data,
E = cellarea) # Acts like an offset
prior.list <- list(range = list(param = c(10, 10)), prec = list(param = c(1, 1)))
formula <- Y ~ 1 + f(id, model = "matern2d", nrow = n_row, ncol = n_col, nu = 1, hyper = prior.list) # Intercept + Matérn spatial random effects
res <- inla(formula,
family = "poisson",
data = grid@data,
E = cellarea) # Acts like an offset
prior.list <- list(range = list(param = c(10, 10)), prec = list(param = c(10, 10)))
formula <- Y ~ 1 + f(id, model = "matern2d", nrow = n_row, ncol = n_col, nu = 1, hyper = prior.list) # Intercept + Matérn spatial random effects
res <- inla(formula,
family = "poisson",
data = grid@data,
E = cellarea) # Acts like an offset
prior.list <- list(prec = list(prior = "pc.prec", param = c(0.25, 0.01)))
formula <- Y ~ 1 + f(id, model = "matern2d", nrow = n_row, ncol = n_col, nu = 1, hyper = prior.list) # Intercept + Matérn spatial random effects
res <- inla(formula,
family = "poisson",
data = grid@data,
E = cellarea) # Acts like an offset
inla.doc("pc.prec")
prior.list <- list(prec = list(prior = "pc.prec", param = c(0.9, 0.01)))
formula <- Y ~ 1 + f(id, model = "matern2d", nrow = n_row, ncol = n_col, nu = 1, hyper = prior.list) # Intercept + Matérn spatial random effects
res <- inla(formula,
family = "poisson",
data = grid@data,
E = cellarea) # Acts like an offset
prior.list <- list(prec = list(prior = "pc.prec", param = c(0.1, 0.01)))
formula <- Y ~ 1 + f(id, model = "matern2d", nrow = n_row, ncol = n_col, nu = 1, hyper = prior.list) # Intercept + Matérn spatial random effects
res <- inla(formula,
family = "poisson",
data = grid@data,
E = cellarea) # Acts like an offset
5*10^-5
int(5*10^-5)
as.integer(5*10^-5)
as.numeric(5*10^-5)
(5*10^-5) = 0.00005
(5*10^-5) == 0.00005
inla.doc("matern2d")
# Change prior of the precision parameter from (1 / sigma^2) ~ Gamma(1, 0.0005) for PC prior for sigma
# Prob(sigma > u) = alpha
prior.list <- list(prec = list(prior = "pc.prec", param = c(0.25, 0.01))) # c(u, alpha)
formula <- Y ~ 1 + f(id, model = "matern2d", nrow = n_row, ncol = n_col, nu = 1, hyper = prior.list) # Intercept + Matérn spatial random effects
res <- inla(formula,
family = "poisson",
data = grid@data,
E = cellarea) # Acts like an offset
saveRDS(object = res, file = "inla_res.RDS")
library("tmap")
grid$RE <- res$summary.random$id[grid$id, "mean"]
gridborder <- gUnaryUnion(grid) # Plot the random effects using `tmap` package
tm_shape(grid) +
tm_polygons(col = c("RE"),
style = "cont", border.col = "transparent", midpoint = NA) +
tm_shape(gridborder) + tm_borders() +
tm_facets(ncol = 1) + tm_legend(legend.position = c("left", "bottom"))
install.packages("tmap")
library("tmap")
grid$RE <- res$summary.random$id[grid$id, "mean"]
gridborder <- gUnaryUnion(grid) # Plot the random effects using `tmap` package
tm_shape(grid) +
tm_polygons(col = c("RE"), style = "cont", border.col = "transparent", midpoint = NA) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 1) +
tm_legend(legend.position = c("left", "bottom"))
?tm_style_white
tm_shape(grid) +
tm_polygons(col = c("RE"), style = "cont", border.col = "transparent", midpoint = NA) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 1) +
tm_legend(legend.position = c("left", "bottom")) +tm_style_white()
tm_shape(grid) +
tm_polygons(col = c("RE"), style = "cont", border.col = "transparent", midpoint = NA) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 1) +
tm_legend(legend.position = c("left", "bottom")) +tm_layout(legend.title.size = .5, legend.text.size = .65,
legend.frame = TRUE)
tm_shape(grid) +
tm_polygons(col = c("RE"), style = "cont", border.col = "transparent", midpoint = NA) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 1) +
tm_legend(legend.position = c("left", "bottom")) + tm_layout(fontfamily = "LM Roman 10")
tm_shape(grid) +
tm_polygons(col = c("RE"), style = "cont", border.col = "transparent", midpoint = NA) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 1) +
tm_legend(legend.position = c("left", "bottom")) + tm_layout(fontfamily = "LM Roman 10", frame = FALSE)
tm_shape(grid) +
tm_polygons(col = c("RE"), style = "cont", border.col = "transparent", midpoint = NA) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 1) +
tm_legend(legend.position = c("right")) + tm_layout(fontfamily = "LM Roman 10", frame = FALSE)
tm_shape(grid) +
tm_polygons(col = c("RE"), style = "cont", border.col = "transparent", midpoint = NA) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 1) +
tm_legend(legend.position = "right") + tm_layout(fontfamily = "LM Roman 10", frame = FALSE)
tm_shape(grid) +
tm_polygons(col = c("RE"), style = "cont", border.col = "transparent", midpoint = NA) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 1) +
tm_legend(legend.position = c("right", "top")) + tm_layout(fontfamily = "LM Roman 10", frame = FALSE)
tm_shape(grid) +
tm_polygons(col = c("RE"), style = "cont", border.col = "transparent", midpoint = NA) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 1) +
tm_legend(legend.position = c("left", "bottom")) + tm_layout(fontfamily = "LM Roman 10", frame = FALSE)
tm_shape(grid) +
tm_polygons(col = c("Rand. Effect"), style = "cont", border.col = "transparent", midpoint = NA) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 1) +
tm_legend(legend.position = c("left", "bottom")) + tm_layout(fontfamily = "LM Roman 10", frame = FALSE)
grid
grid
grid$RE
grid$RandEffect <- res$summary.random$id[grid$id, "mean"]
gridborder <- gUnaryUnion(grid) # Plot the random effects using `tmap` package
gridborder <- gUnaryUnion(grid) # Plot the random effects using `tmap` package
tm_shape(grid) +
tm_polygons(col = c("RandEffect"), style = "cont", border.col = "transparent", midpoint = NA) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 1) +
tm_legend(legend.position = c("left", "bottom")) + tm_layout(fontfamily = "LM Roman 10", frame = FALSE)
grid$R.E. <- res$summary.random$id[grid$id, "mean"]
gridborder <- gUnaryUnion(grid) # Plot the random effects using `tmap` package
tm_shape(grid) +
tm_polygons(col = c("R.E."), style = "cont", border.col = "transparent", midpoint = NA) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 1) +
tm_legend(legend.position = c("left", "bottom")) + tm_layout(fontfamily = "LM Roman 10", frame = FALSE)
terror_country <- readRDS(file = "terror_country.rds")
table(terror_country$country)
country_code <- "IRQ"
terror_country <- terror_country[terror_country$country == country_code, ]
terror_country <- terror_country[(terror_country$iyear >= 2010) & (terror_country$iyear <= 2015), ]
coordinates(terror_country) <- c("longitude", "latitude")
proj4string(terror_country) <- "+proj=longlat"
area_country <- readRDS(file = "area_country.rds")
area_country <- area_country[area_country$sov_a3 == country_code, ]
area_country <- spTransform(x = area_country, CRSobj = CRS("+proj=longlat"))
plot(area_country, main = "")
plot(terror_country, add = T, col = "green")
resolution <- 0.5
r <- raster(area_country, resolution = resolution)
(n_row <- nrow(r))
(n_col <- ncol(r))
terror_country$year <- terror_country$iyear - min(terror_country$iyear) + 1
n_years <- length(unique(terror_country$year))
tab <- list()
ras <- list()
grids <- list()
grids_map <- list()
par(mfrow = c(2, 3), mar = c(2, 2, 2, 6))
for (y in 1:n_years) {
tab[[y]] <- table(cellFromXY(r, terror_country[terror_country$year == y, ]))
ras[[y]] <- r
ras[[y]][as.numeric(names(tab[[y]]))] <- tab[[y]]
values(ras[[y]])[is.na(values(ras[[y]]))] <- 0
grids[[y]] <- rasterToPolygons(ras[[y]])
grids[[y]] <- grids[[y]][as.vector(matrix(1:nrow(grids[[y]]), nrow = n_row, ncol = n_col, byrow = T)), ]
grids[[y]]$id <- 1:nrow(grids[[y]])
grids[[y]]$Y <- grids[[y]]$layer
grids[[y]]$cellarea <- resolution * resolution
grids_map[[y]] <- raster::intersect(x = grids[[y]], y = area_country)
grids[[y]] <- grids[[y]][grids[[y]]$id %in% grids_map[[y]]$id, ]
plot(ras[[y]], main = y)
plot(area_country, add = T)
}
par(mfrow = c(1, 1))
for (y in 1:n_years) {
if (y == 1) {
data_inla <- grids[[y]]@data
} else {
data_inla <- rbind(data_inla, grids[[y]]@data)
}
}
data_inla <- cbind(data_inla, id_time = rep(x = 1:n_years, each = nrow(grids[[1]])))
data_inla[c(1:3, ((nrow(data_inla) - 2):nrow(data_inla))), ]
formula <- Y ~ 1 + f(id,
model = "matern2d",
nrow = n_row,
ncol = n_col,
nu = 1,
group = id_time,
control.group = list(model = "ar1")) # IMPORTANT!
res <- inla(formula,
family = "poisson",
data = data_inla,
E = resolution)
# Change prior of the precision parameter from (1 / sigma^2) ~ Gamma(1, 0.0005) for PC prior for sigma
# Prob(sigma > u) = alpha
prior.list <- list(prec = list(prior = "pc.prec", param = c(0.25, 0.01))) # c(u, alpha)
# Change prior of the precision parameter from (1 / sigma^2) ~ Gamma(1, 0.0005) for PC prior for sigma
# Prob(sigma > u) = alpha
prior.list <- list(prec = list(prior = "pc.prec", param = c(0.25, 0.01))) # c(u, alpha)
formula <- Y ~ 1 + f(id,
model = "matern2d",
nrow = n_row,
ncol = n_col,
nu = 1,
group = id_time,
control.group = list(model = "ar1"), # IMPORTANT!
hyper = prior.list)
res <- inla(formula,
family = "poisson",
data = data_inla,
E = resolution)
saveRDS(object = res, file = "res_st.rds")
res <- readRDS(file = "res_st.rds")
?inla.group
id_time
data_inla
formula <- Y ~ 1 + f(id,
model = "matern2d",
nrow = n_row,
ncol = n_col,
nu = 1,
hyper = prior.list) + f(id_time, model = "ar1")
res <- inla(formula,
family = "poisson",
data = data_inla,
E = resolution)
res
summary(res)
summary(res)
formula <- Y ~ 1 + f(id,
model = "matern2d",
nrow = n_row,
ncol = n_col,
nu = 1,
hyper = prior.list) + f(inla.group(id_time), model = "ar1")
res <- inla(formula,
family = "poisson",
data = data_inla,
E = resolution)
summary(res)
formula
summary(res)
formula <- Y ~ 1 + f(id,
model = "matern2d",
nrow = n_row,
ncol = n_col,
nu = 1,
hyper = prior.list) + f(id_time, model = "ar1")
res <- inla(formula,
family = "poisson",
data = data_inla,
E = resolution)
summary(res)
grid       <- grids[[1]]
cells_grid <- nrow(grids[[1]])
cellarea   <- resolution * resolution
grid$M1 <- res$summary.fitted.values[, "mean"][1:cells_grid] * cellarea
grid$M2 <- res$summary.fitted.values[, "mean"][(cells_grid + 1):(cells_grid * 2)] * cellarea
grid$M3 <- res$summary.fitted.values[, "mean"][(cells_grid * 2 + 1):(cells_grid * 3)] * cellarea
grid$M4 <- res$summary.fitted.values[, "mean"][(cells_grid * 3 + 1):(cells_grid * 4)] * cellarea
grid$M5 <- res$summary.fitted.values[, "mean"][(cells_grid * 4 + 1):(cells_grid * 5)] * cellarea
grid$M6 <- res$summary.fitted.values[, "mean"][(cells_grid * 5 + 1):(cells_grid * 6)] * cellarea
max_int <- ceiling(max(c(grid$M1, grid$M2, grid$M3, grid$M4, grid$M5, grid$M6)))
max_int <- ceiling(max_int / 10) * 10
bbox_new <- st_bbox(grid)
xrange <- bbox_new$xmax - bbox_new$xmin # range of x values
yrange <- bbox_new$ymax - bbox_new$ymin # range of y values
bbox_new[1] <- bbox_new[1] - (0.25 * xrange)
bbox_new <- bbox_new %>% st_as_sfc()
gridborder <- gUnaryUnion(grid)
tm_shape(grid, bbox = bbox_new) +
tm_polygons(col = c("M1", "M2", "M3", "M4", "M5", "M6"),
style = 'fixed', border.col = "transparent",
breaks = c(0, 1, 3, 5, 10, 20, 30, 50, max_int)) +
tm_shape(gridborder) + tm_borders() +
tm_facets(ncol = 3) + tm_legend(legend.position = c("left", "bottom")) +
tm_layout(fontfamily = "LM Roman 10", frame = FALSE)
formula <- Y ~ 1 + f(id,
model = "matern2d",
nrow = n_row,
ncol = n_col,
nu = 1,
group = id_time,
control.group = list(model = "ar1"), # IMPORTANT!
hyper = prior.list)
res <- inla(formula,
family = "poisson",
data = data_inla,
E = resolution)
# Separable space-temporal model: eta_ij = beta_0 + u_i + v_j
formula <- Y ~ 1 + f(id,
model = "matern2d",
nrow = n_row,
ncol = n_col,
nu = 1,
hyper = prior.list) + f(id_time, model = "ar1")
res <- inla(formula,
family = "poisson",
data = data_inla,
E = resolution)
prior.list <- list(prec = list(prior = "pc.prec", param = c(0.25, 0.01))) # Priors
# Separable space-temporal model: eta_ij = beta_0 + u_i + v_j
formula <- Y ~ 1 + f(id,
model = "matern2d",
nrow = n_row,
ncol = n_col,
nu = 1,
hyper = prior.list) + f(id_time, model = "ar1")
# Model with interaction: eta_ij = beta_0 + u_ij
# formula <- Y ~ 1 + f(id,
#                      model = "matern2d",
#                      nrow = n_row,
#                      ncol = n_col,
#                      nu = 1,
#                      group = id_time,
#                      control.group = list(model = "ar1"),
#                      hyper = prior.list)
res <- inla(formula,
family = "poisson",
data = data_inla,
E = resolution)
saveRDS(object = res, file = "res_st.rds")
